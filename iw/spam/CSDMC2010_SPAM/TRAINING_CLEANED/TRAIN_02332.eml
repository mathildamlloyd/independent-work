None> On Apr 7, 2010, at 8:38 AM, Brandon Moon wrote:
>
>    
>> On 4/7/2010 7:00 AM, Tomas Hurka wrote:
>>
>>      
>>> On 7 Apr 2010, at 00:29, Brandon Moon wrote:
>>>
>>>        
>>>> I'm having an issue with a JNI library when distributed as part of a JNLP app (or Java Web Start).  The Java application loads the library, then calls a native function that spawns a new thread.  I attach this thread to the JVM (using AttachCurrentThreadAsDaemon) and initialize a JNIEnv object.  I then use this JNIEnv object to get the Java class and a few methods (so I can get back to java on certain events).  When I run this over Java Web Start, the call that requests a method id crashes.  I have no idea why this happens, and can't find any related errors online.  Has anyone else run into this problem?  Any input would be appreciated.
>>>>
>>>> This is the native code, the line that causes problems has *** around it:
>>>>
>>>> // Attach this thread to Java VM
>>>>    if ((*javaVM)->AttachCurrentThreadAsDaemon(javaVM, (void**)&eventPumpEnv, NULL)<  0) {
>>>>        NSLog(@"Failed to attach event pump to Java VM");
>>>>    }
>>>>    else {
>>>>        // Cache class and method references
>>>>        systemHooks = (*eventPumpEnv)->FindClass(eventPumpEnv, "com/pixelture/systemhooks/SystemHooks");
>>>>        systemHooks = (*eventPumpEnv)->NewGlobalRef(eventPumpEnv, systemHooks);
>>>>
>>>> ***        notifySuspend = (*eventPumpEnv)->GetStaticMethodID(eventPumpEnv, systemHooks, "notifySuspend", "()V"); ***
>>>>        //notifySuspend = (jmethodID)(*eventPumpEnv)->NewGlobalRef(eventPumpEnv, (jobject)notifySuspend);
>>>>        notifySystemEvent = (*eventPumpEnv)->GetStaticMethodID(eventPumpEnv, systemHooks, "notifySystemEvent", "(JI)V");
>>>>        //notifySystemEvent = (jmethodID)(*eventPumpEnv)->NewGlobalRef(eventPumpEnv, (jobject)notifySystemEvent);
>>>>
>>>>        ...
>>>>
>>>>        if (DEBUG) NSLog(@"Attached PollingLoop to Java and got environment&  methods");
>>>>    }
>>>>          
>>> I think that class "com/pixelture/systemhooks/SystemHooks" is not found for some reason. Check that systemHooks is not NULL and that FindClass method does not throw an exception.
>>>        
>> So you were right, Java is throwing a ClassNotFoundException, but I don't understand why this would be the case.  I have a static initializer in that class, and that's where it is loading and calling that native method.  How can the class not be found if that's where the native method is being called from?
>>      
> Think about it: you are calling your JNI function from the class' static initializer. The class is not initialized yet. Attempts to find the (uninitialized) class should probably fail.
>
> Regards,
> Mike Swingler
> Java Runtime Engineer
> Apple Inc.

I'm not trying to load an instance of the class, I'm trying to load the 
actual class definition.  The error is telling me that the Java 
ClassLoader can't find that class on the classpath (at least that's my 
understanding).  What I don't understand is, for it to have called the 
static initializer, that means Java has already loaded the class 
definition, right?  So why can't it find it?

Brandon Moon<brandon@pixelture.com
http://www.pixelture.com

Join us for EduComm 2010
June 7 - 9 Las Vegas
www.EducommConference.com


 _______________________________________________
Do not post admin requests to the list. They will be ignored.
Java-dev mailing list      (Java-dev@lists.apple.com)
Help/Unsubscribe/Update your Subscription:
http://lists.apple.com/mailman/options/java-dev/mlsubscriber.tech%40csmining.org

This email sent to mlsubscriber.tech@csmining.org

re: problems with jni included in a jnlp on mac os xon 4/7/2010 9:50 am, mike swingler wrote:
> on apr 7, 2010, at 8:38 am, brandon moon wrote:
>
>    
>> on 4/7/2010 7:00 am, tomas hurka wrote:
>>
>>      
>>> on 7 apr 2010, at 00:29, brandon moon wrote:
>>>
>>>        
>>>> i'm having an issue with a jni library when distributed as part of a jnlp app (or java web start).  the java application loads the library, then calls a native function that spawns a new thread.  i attach this thread to the jvm (using attachcurrentthreadasdaemon) and initialize a jnienv object.  i then use this jnienv object to get the java class and a few methods (so i can get back to java on certain events).  when i run this over java web start, the call that requests a method id crashes.  i have no idea why this happens, and can't find any related errors online.  has anyone else run into this problem?  any input would be appreciated.
>>>>
>>>> this is the native code, the line that causes problems has *** around it:
>>>>
>>>> // attach this thread to java vm
>>>>    if ((*javavm)->attachcurrentthreadasdaemon(javavm, (void**)&eventpumpenv;, null)<  0) {
>>>>        nslog(@"failed to attach event pump to java vm");
>>>>    }
>>>>    else {
>>>>        // cache class and method references
>>>>        systemhooks = (*eventpumpenv)->findclass(eventpumpenv, "com/pixelture/systemhooks/systemhooks");
>>>>        systemhooks = (*eventpumpenv)->newglobalref(eventpumpenv, systemhooks);
>>>>
>>>> ***        notifysuspend = (*eventpumpenv)->getstaticmethodid(eventpumpenv, systemhooks, "notifysuspend", "()v"); ***
>>>>        //notifysuspend = (jmethodid)(*eventpumpenv)->newglobalref(eventpumpenv, (jobject)notifysuspend);
>>>>        notifysystemevent = (*eventpumpenv)->getstaticmethodid(eventpumpenv, systemhooks, "notifysystemevent", "(ji)v");
>>>>        //notifysystemevent = (jmethodid)(*eventpumpenv)->newglobalref(eventpumpenv, (jobject)notifysystemevent);
>>>>
>>>>        ...
>>>>
>>>>        if (debug) nslog(@"attached pollingloop to java and got environment&  methods");
>>>>    }
>>>>          
>>> i think that class "com/pixelture/systemhooks/systemhooks" is not found for some reason. check that systemhooks is not null and that findclass method does not throw an exception.
>>>        
>> so you were right, java is throwing a classnotfoundexception, but i don't understand why this would be the case.  i have a static initializer in that class, and that's where it is loading and calling that native method.  how can the class not be found if that's where the native method is being called from?
>>      
> think about it: you are calling your jni function from the class' static initializer. the class is not initialized yet. attempts to find the (uninitialized) class should probably fail.
>
> regards,
> mike swingler
> java runtime engineer
> apple inc.

i'm not trying to load an instance of the class, i'm trying to load the 
actual class definition.  the error is telling me that the java 
classloader can't find that class on the classpath (at least that's my 
understanding).  what i don't understand is, for it to have called the 
static initializer, that means java has already loaded the class 
definition, right?  so why can't it find it?

brandon moon