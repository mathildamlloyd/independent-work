from nobody tue dec 16 09:15:47 2014
content-type: text/plain; charset=iso-8859-1
content-transfer-encoding: quoted-printable

on 05/12/2010 07:03 pm, stefan monnier wrote:
>> the 64-bit vs 32-bit argument is multi-faceted.  it gets much deeper t=
han
>> just addressing more than 3gb of ram:
>> * twice the transfer width on the bus
>=20
> nope, no difference on the bus.   most accesses will be
> cache-line-sized anyway at that level.

you're kidding, right? you can push twice the data, which means faster
cpu to memory utilization for cpu intensive applications. flash anyone?

>> * no memory split issues
>=20
> for <=3d3gb systems, that makes no difference.  and as someone running
> a bigmem kernel on a 4gb system, i can say that even for other systems,=

> it's not necessarily relevant.

it's very relevant. you must not have run into this issue much. 4:4
kernel splits are the best you can do on a 32-bit system, but it comes
at a performance cost. splitting and performance are never an issue on
64-bit until you've reache 17 eb of ram.

>> * increased virtual address space
>=20
> right.  unlikely he'll ever notice it.

whether he will or won't isn't the issue. i'm not discussing use cases,
i'm discussing the facts on why 64-bit is superior to 32-bit.

>> * more breathing room for mmap()'d files
>=20
> again, unlikely he'll ever notice it (otherwise he wouldn't have asked)=
=2e

see above.

>> * deeper nested system calls with increased stability
>=20
> i see no evidence of increased stability and have no idea what you want=

> to say with "deeper nested system calls".

i'll give you an example. use xfs on lvm, and export the mount over nfs.
the nested system calls in this scenario will cause a kernel oops on any
4k 32-bit kernel nearly every time (the default for debian gnu/linux,
fedora, ubuntu, opensuse, etc). on a 64-bit kernel, because you have the
ability to make deeper nested system calls, you have stability in your
infrastructure. something that couldn't be achieved with a 32-bit kernel.=


>> * certain applications and operations will execute faster
>=20
> yup.  and others will be slower since you'll have to move around more
> data (up to twice as much if your data is made up mostly of pointers),
> which means that the apparent cache and ram size will end up
> being reduced.

the same would be said for a 32-bit application implemented the same
way. poor software development is hardly an argument against choosing a
cpu architecture.

>> if you have the hardware, you should definitely be running a 64-bit
>> operating system, even if you don't have 4gb+ of ram.
>=20
> if you have to ask, you probably won't notice any difference
> either way.

to each their own. i for one want to get my money out of my hardware. if
you don't want a 64-bit system, then why did you pay for it?

--=20
=2e o .   o . o   . . o   o . .   . o .
=2e . o   . o o   o . o   . o o   . . o
o o o   . o .   . o o   o o .   o o o

from nobody tue dec 16 09:15:47 2014
content-type: application/pgp-signature; name="signature.asc"
content-description: openpgp digital signature
content-disposition: attachment; filename="signature.asc"

-----begin pgp signature-----
version: gnupg v1.4.10 (gnu/linux)
comment: public key at: http://tinyurl.com/aaron-gpg
comment: using gnupg with mozilla - http://enigmail.mozdev.org/

iqecbaebcgagbqjl63ttaaojem55ebf8baip6p8h/3r52lo4nyvpftqxet/aalea
gqmb4clvwpmlikmonddvcubreqq+z6anwhzvxpt0ybliar13xxgj+81ptaumt0lg
4c4uj6t0ldkspcdamb0eeuwvsbopx7odhutsojk/frlonkeqigjsbakp+adsp1ca
nxrkf0dyxug9xmi3/taodicusc9tbpbkuwuvldgk7f3stqeursigvegjdvz6kzhe
oe8pufe2inicga0wn0wudnqa1lrsnlydqtj1gud/frw8jgxuwcq1aoxiu6aeguel
jjhfgcqxzran2etmeah7mepdr0fh//ibsfygyffdf9kpk523bxahbt/+flahcsu=
=nvwg
-----end pgp signature-----
